'use client';

import { motion } from 'framer-motion';
import { useState } from 'react';
import Link from 'next/link';

const personalityTraits = {
  1: { trait: '‡∏ú‡∏π‡πâ‡∏ô‡∏≥‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥', description: '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ô‡∏≥ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå' },
  2: { trait: '‡∏ô‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏π‡∏ï', description: '‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏á‡∏ö ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏î‡∏ó‡∏ô ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡∏°‡πÑ‡∏î‡πâ‡∏î‡∏µ' },
  3: { trait: '‡∏ô‡∏±‡∏Å‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£', description: '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£ ‡∏°‡∏µ‡πÄ‡∏™‡∏ô‡πà‡∏´‡πå ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå' },
  4: { trait: '‡∏ô‡∏±‡∏Å‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥', description: '‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ö ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ú‡∏ô' },
  5: { trait: '‡∏ô‡∏±‡∏Å‡∏ú‡∏à‡∏ç‡∏†‡∏±‡∏¢', description: '‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡∏£‡∏±‡∏Å‡∏≠‡∏¥‡∏™‡∏£‡∏∞ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏≠‡∏¢‡∏≤‡∏Å‡πÄ‡∏´‡πá‡∏ô‡∏™‡∏π‡∏á' },
  6: { trait: '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•', description: '‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏Å‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏ö‡∏ú‡∏¥‡∏î‡∏ä‡∏≠‡∏ö ‡πÅ‡∏•‡∏∞‡∏ä‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô' },
  7: { trait: '‡∏ô‡∏±‡∏Å‡∏Ñ‡∏¥‡∏î', description: '‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ä‡∏≤‡∏ï‡∏ç‡∏≤‡∏ì‡∏î‡∏µ ‡πÅ‡∏•‡∏∞‡∏ä‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∂‡∏Å‡∏•‡∏±‡∏ö' },
  8: { trait: '‡∏ô‡∏±‡∏Å‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à', description: '‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏∏‡πà‡∏á‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' },
  9: { trait: '‡∏ú‡∏π‡πâ‡πÉ‡∏´‡πâ', description: '‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏à‡∏¥‡∏ï‡πÉ‡∏à‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤‡∏á ‡∏ä‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏ï‡∏ï‡∏≤' }
};

const luckyElements = {
  colors: ['‡πÅ‡∏î‡∏á', '‡∏ó‡∏≠‡∏á', '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô', '‡∏°‡πà‡∏ß‡∏á', '‡∏ä‡∏°‡∏û‡∏π', '‡πÄ‡∏á‡∏¥‡∏ô', '‡∏™‡πâ‡∏°'],
  stones: ['‡∏ó‡∏±‡∏ö‡∏ó‡∏¥‡∏°', '‡∏°‡∏£‡∏Å‡∏ï', '‡πÑ‡∏û‡∏•‡∏¥‡∏ô', '‡πÄ‡∏û‡∏ä‡∏£', '‡∏≠‡πÄ‡∏°‡∏ó‡∏¥‡∏™‡∏ï‡πå', '‡πÇ‡∏ó‡∏õ‡∏≤‡∏ã', '‡πÄ‡∏û‡∏¥‡∏£‡πå‡∏•', '‡πÇ‡∏≠‡∏õ‡∏≠‡∏•'],
  days: ['‡∏ß‡∏±‡∏ô‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå', '‡∏ß‡∏±‡∏ô‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£', '‡∏ß‡∏±‡∏ô‡∏û‡∏∏‡∏ò', '‡∏ß‡∏±‡∏ô‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ', '‡∏ß‡∏±‡∏ô‡∏®‡∏∏‡∏Å‡∏£‡πå', '‡∏ß‡∏±‡∏ô‡πÄ‡∏™‡∏≤‡∏£‡πå', '‡∏ß‡∏±‡∏ô‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå']
};

const dailyLuck = [
  '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏Ñ‡∏£‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà',
  '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏±‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏Ñ‡∏∏‡∏ì',
  '‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏£‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∏‡∏ô',
  '‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏Å‡∏ú‡πà‡∏≠‡∏ô',
  '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏ö‡∏õ‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ù‡∏π‡∏á',
  '‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡∏°‡∏≤‡∏ñ‡∏∂‡∏á',
  '‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏°‡∏±‡∏î‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç',
  '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏´‡∏•‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏°‡∏≤‡∏Å'
];

export default function BirthdayFortune() {
  const [birthDate, setBirthDate] = useState('');
  const [fortune, setFortune] = useState(null);
  const [isAnalyzing, setIsAnalyzing] = useState(false);

  const calculateLifePath = (dateString) => {
    const date = new Date(dateString);
    const day = date.getDate();
    const month = date.getMonth() + 1;
    const year = date.getFullYear();
    
    // Calculate life path number
    let sum = day + month + year;
    while (sum > 9) {
      sum = sum.toString().split('').reduce((acc, digit) => acc + parseInt(digit), 0);
    }
    
    return sum;
  };

  const analyzeBirthday = () => {
    if (!birthDate) return;
    
    setIsAnalyzing(true);
    
    setTimeout(() => {
      const lifePathNumber = calculateLifePath(birthDate);
      const personality = personalityTraits[lifePathNumber];
      
      const randomLucky = {
        color: luckyElements.colors[Math.floor(Math.random() * luckyElements.colors.length)],
        stone: luckyElements.stones[Math.floor(Math.random() * luckyElements.stones.length)],
        day: luckyElements.days[Math.floor(Math.random() * luckyElements.days.length)]
      };
      
      const todayLuck = dailyLuck[Math.floor(Math.random() * dailyLuck.length)];
      
      setFortune({
        lifePathNumber,
        personality,
        lucky: randomLucky,
        todayLuck,
        birthDate: new Date(birthDate).toLocaleDateString('th-TH')
      });
      setIsAnalyzing(false);
    }, 2500);
  };

  return (
    <div className="min-h-screen p-4">
      <div className="container mx-auto max-w-4xl">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 30 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center py-8"
        >
          <div className="text-6xl mb-4">üéÇ</div>
          <h1 className="text-3xl md:text-4xl font-bold text-white mb-2">
            ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
          </h1>
          <p className="text-white/80">‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ô‡∏¥‡∏™‡∏±‡∏¢‡πÅ‡∏•‡∏∞‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì</p>
        </motion.div>

        {/* Date Input */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.3 }}
          className="mb-8"
        >
          <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6 text-center">
            <h2 className="text-xl font-semibold text-white mb-4">
              ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
            </h2>
            <div className="max-w-md mx-auto">
              <input
                type="date"
                value={birthDate}
                onChange={(e) => setBirthDate(e.target.value)}
                className="w-full p-3 rounded-xl bg-white/20 text-white placeholder-white/60 border border-white/30 focus:border-purple-400 focus:outline-none"
              />
            </div>
            
            {birthDate && (
              <motion.button
                initial={{ opacity: 0, y: 10 }}
                animate={{ opacity: 1, y: 0 }}
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={analyzeBirthday}
                disabled={isAnalyzing}
                className="mt-4 bg-gradient-to-r from-purple-500 to-pink-500 text-white px-8 py-3 rounded-full font-semibold text-lg shadow-lg disabled:opacity-50"
              >
                {isAnalyzing ? (
                  <div className="flex items-center space-x-2">
                    <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                    <span>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå...</span>
                  </div>
                ) : (
                  '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏ß‡∏á‡∏ä‡∏∞‡∏ï‡∏≤'
                )}
              </motion.button>
            )}
          </div>
        </motion.div>

        {/* Fortune Result */}
        {fortune && (
          <motion.div
            initial={{ opacity: 0, y: 30 }}
            animate={{ opacity: 1, y: 0 }}
            className="space-y-6 mb-8"
          >
            {/* Life Path Number */}
            <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6">
              <div className="text-center mb-4">
                <div className="text-4xl mb-2">üî¢</div>
                <h3 className="text-2xl font-bold text-white mb-2">
                  ‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï: {fortune.lifePathNumber}
                </h3>
                <p className="text-purple-300 text-lg">{fortune.personality.trait}</p>
              </div>
              <p className="text-white/90 text-center">{fortune.personality.description}</p>
            </div>

            {/* Personality Analysis */}
            <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6">
              <h4 className="text-xl font-semibold text-white mb-4 text-center">
                üåü ‡∏™‡∏¥‡πà‡∏á‡∏°‡∏á‡∏Ñ‡∏•‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß
              </h4>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="text-center">
                  <div className="text-3xl mb-2">üé®</div>
                  <h5 className="font-semibold text-white mb-1">‡∏™‡∏µ‡∏°‡∏á‡∏Ñ‡∏•</h5>
                  <p className="text-white/90">{fortune.lucky.color}</p>
                </div>
                <div className="text-center">
                  <div className="text-3xl mb-2">üíé</div>
                  <h5 className="font-semibold text-white mb-1">‡∏û‡∏•‡∏≠‡∏¢‡∏°‡∏á‡∏Ñ‡∏•</h5>
                  <p className="text-white/90">{fortune.lucky.stone}</p>
                </div>
                <div className="text-center">
                  <div className="text-3xl mb-2">üìÖ</div>
                  <h5 className="font-semibold text-white mb-1">‡∏ß‡∏±‡∏ô‡∏°‡∏á‡∏Ñ‡∏•</h5>
                  <p className="text-white/90">{fortune.lucky.day}</p>
                </div>
              </div>
            </div>

            {/* Today's Luck */}
            <div className="bg-white/10 backdrop-blur-md rounded-2xl p-6">
              <div className="text-center">
                <div className="text-4xl mb-3">üçÄ</div>
                <h4 className="text-xl font-semibold text-white mb-3">‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ß‡∏±‡∏ô</h4>
                <p className="text-white/90">{fortune.todayLuck}</p>
              </div>
            </div>

            {/* Reset Button */}
            <div className="text-center">
              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={() => {
                  setBirthDate('');
                  setFortune(null);
                }}
                className="bg-gradient-to-r from-purple-500 to-pink-500 text-white px-6 py-2 rounded-full font-semibold"
              >
                ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÉ‡∏´‡∏°‡πà
              </motion.button>
            </div>
          </motion.div>
        )}

        {/* Back Button */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 0.5 }}
          className="text-center"
        >
          <Link href="/">
            <motion.button
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
              className="bg-white/20 text-white px-6 py-2 rounded-full hover:bg-white/30 transition-colors"
            >
              ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
            </motion.button>
          </Link>
        </motion.div>
      </div>
    </div>
  );
}
